"use strict";

let Tc = prompt('температура в градусах');
let Tf = (9 / 5) * Tc + 32;
alert(Tf)

let admin, name;
name = "Василий";
admin = name;
alert( admin );

// defer всегда ждёт, пока весь HTML-документ будет готов, а async выполняется сразу после загрузки.
// о при помощи атрибутов defer и async можно явно управлять порядком загрузки и выполнения скриптов.
// При обнаружении <script async src="..."> браузер не останавливает обработку страницы, а спокойно работает дальше. Когда скрипт будет загружен – он выполнится.
// Скрипты с атрибутом defer будут предотвращать запуск события DOMContentLoaded до тех пор, пока скрипт не загрузится полностью и не завершится его инициализация.
//<script src="script1.js" defer></script>
//<script src="script1.js" async></script>

console.log(10 + 10 + "10"); // сложение и строка
console.log(10+"10"+10); // тут только сложение строк
console.log(10 + 10 + +"10"); // тут 30, тк в строке 10
console.log(10/""); // явно не хватает данных. Ошибка
console.log(10/+"2,5"); // деление на строку. Ошибка

const input = +prompt("Введите номер вашего билета:");

if (isNaN(input) || input === 0) {
    alert("Введите цифры");
} else if(input < 100000 || input > 999999){
    alert("Введено недопустимое значение цифр номера билета");
} else {
    const a = ((input / 100000) ^ 0) + ((input / 10000 % 10) ^ 0) + ((input/ 1000 % 10) ^ 0);
    const b = ((input / 100 % 10) ^ 0) + ((input / 10 % 10) ^ 0) + (input % 10);

    const answer = (a === b) ? "Ваш билет счастливый!" : "Вам не повезло!";
    alert(answer);
}




